# Generated by Django 2.1.2 on 2018-10-19 16:34

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvisingNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, max_length=1000)),
                ('datestamp', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., University Physics I & Lab', max_length=50)),
                ('number', models.CharField(help_text='e.g., PHY211', max_length=10)),
                ('credit_hours', models.PositiveIntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')], default=3)),
                ('sp', models.BooleanField(default=False, verbose_name='SP')),
                ('cc', models.BooleanField(default=False, verbose_name='CC')),
                ('coreqs', models.ManyToManyField(blank=True, related_name='co_courses', to='planner.Course')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='CreateYourOwnCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Underwater Basket Weaving', max_length=50)),
                ('number', models.CharField(help_text='e.g., UBW101', max_length=10)),
                ('credit_hours', models.PositiveIntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')], default=3)),
                ('semester', models.PositiveIntegerField()),
                ('actual_year', models.PositiveIntegerField(choices=[(2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022')], default=2012)),
                ('sp', models.BooleanField(default=False, verbose_name='SP')),
                ('cc', models.BooleanField(default=False, verbose_name='CC')),
                ('equivalentcourse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Physics and Engineering', max_length=50)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnteringYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(choices=[(2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022')], default=2012)),
            ],
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Physics BS or Mathematics BA.', max_length=50)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrepopulateSemesters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Physics BS, entering odd years', max_length=100)),
                ('enteringyear', models.ManyToManyField(to='planner.EnteringYear')),
                ('freshman_fall_courses', models.ManyToManyField(blank=True, related_name='frfall', to='planner.Course')),
                ('freshman_jterm_courses', models.ManyToManyField(blank=True, related_name='frjterm', to='planner.Course')),
                ('freshman_spring_courses', models.ManyToManyField(blank=True, related_name='frspring', to='planner.Course')),
                ('freshman_summer_courses', models.ManyToManyField(blank=True, related_name='frsummer', to='planner.Course')),
                ('junior_fall_courses', models.ManyToManyField(blank=True, related_name='jrfall', to='planner.Course')),
                ('junior_jterm_courses', models.ManyToManyField(blank=True, related_name='jrjterm', to='planner.Course')),
                ('junior_spring_courses', models.ManyToManyField(blank=True, related_name='jrspring', to='planner.Course')),
                ('junior_summer_courses', models.ManyToManyField(blank=True, related_name='jrsummer', to='planner.Course')),
                ('major', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.Major')),
                ('senior_fall_courses', models.ManyToManyField(blank=True, related_name='srfall', to='planner.Course')),
                ('senior_jterm_courses', models.ManyToManyField(blank=True, related_name='srjterm', to='planner.Course')),
                ('senior_spring_courses', models.ManyToManyField(blank=True, related_name='srspring', to='planner.Course')),
                ('senior_summer_courses', models.ManyToManyField(blank=True, related_name='srsummer', to='planner.Course')),
                ('sophomore_fall_courses', models.ManyToManyField(blank=True, related_name='sofall', to='planner.Course')),
                ('sophomore_jterm_courses', models.ManyToManyField(blank=True, related_name='sojterm', to='planner.Course')),
                ('sophomore_spring_courses', models.ManyToManyField(blank=True, related_name='sospring', to='planner.Course')),
                ('sophomore_summer_courses', models.ManyToManyField(blank=True, related_name='sosummer', to='planner.Course')),
            ],
            options={
                'verbose_name_plural': 'Prepopulate semesters',
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RequirementBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., PhysicsBS Technical Electives, or GenEd Literature; first part is helpful for searching (when creating a major).', max_length=50)),
                ('display_name', models.CharField(help_text='e.g., Technical Electives, or Literature; this is the title that will show up when students do a graduation audit.', max_length=50)),
                ('AND_or_OR_Requirement', models.IntegerField(choices=[(1, 'AND'), (2, 'OR')], default=1, help_text='Choose AND if all are required, OR if a subset is required.')),
                ('minimum_number_of_credit_hours', models.IntegerField(default=10)),
                ('list_order', models.PositiveIntegerField(default=1, help_text='Preferred place in the list of requirements; it is OK if numbers are repeated or skipped.')),
                ('text_for_user', models.CharField(blank=True, help_text='Optional helpful text for the user; will appear in the graduation audit.', max_length=200)),
                ('courselist', models.ManyToManyField(help_text='Select courses for this requirement.', to='planner.Course')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Fa12 or J13', max_length=50)),
                ('semester_of_acad_year', models.IntegerField(choices=[(1, 'Fall'), (2, 'J-term'), (3, 'Spring'), (4, 'Summer')], default=1)),
                ('actual_year', models.PositiveIntegerField(choices=[(2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022')], default=2012)),
            ],
            options={
                'ordering': ['semester_of_acad_year'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('entering_year', models.PositiveIntegerField(default=2012, help_text='e.g., 2015')),
                ('major', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Major')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StudentSemesterCourses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.PositiveIntegerField(choices=[(0, 'Pre-TU'), (1, 'Fall'), (2, 'J-term'), (3, 'Spring'), (4, 'Summer')], default=1)),
                ('year', models.PositiveIntegerField(choices=[(0, 'Pre-TU'), (1, 'Freshman'), (2, 'Sophmore'), (3, 'Junior'), (4, 'Senior'), (5, 'Super-Senior')], default=1)),
                ('courses', models.ManyToManyField(blank=True, related_name='semestercourses', to='planner.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ssc_student', to='planner.Student')),
            ],
            options={
                'verbose_name_plural': 'Student semester courses',
            },
        ),
        migrations.CreateModel(
            name='UserProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='student',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='professor',
            name='advisee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Student'),
        ),
        migrations.AddField(
            model_name='professor',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='major',
            name='major_requirements',
            field=models.ManyToManyField(to='planner.RequirementBlock'),
        ),
        migrations.AddField(
            model_name='createyourowncourse',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cyoc_student', to='planner.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.Department'),
        ),
        migrations.AddField(
            model_name='course',
            name='prereqs',
            field=models.ManyToManyField(blank=True, related_name='pre_courses', to='planner.Course'),
        ),
        migrations.AddField(
            model_name='course',
            name='semester',
            field=models.ManyToManyField(to='planner.Semester'),
        ),
        migrations.AddField(
            model_name='advisingnote',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='advisingnotes_student', to='planner.Student'),
        ),
    ]
